{
  "stats": {
    "suites": 5,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-06T14:38:10.417Z",
    "end": "2024-03-06T14:38:11.151Z",
    "duration": 734,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ec05386f-c75c-4d34-bcfe-ee86c725340e",
      "title": "",
      "fullFile": "D:\\works\\ts-project\\chain-handler\\test\\index.test.ts",
      "file": "\\test\\index.test.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8feb850e-b762-45f0-944f-f83692f6b1bd",
          "title": "HandlerChain",
          "fullFile": "D:\\works\\ts-project\\chain-handler\\test\\index.test.ts",
          "file": "\\test\\index.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "34fcdb17-a54b-47fa-9c30-7381f6008143",
              "title": "status code",
              "fullFile": "D:\\works\\ts-project\\chain-handler\\test\\index.test.ts",
              "file": "\\test\\index.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "404",
                  "fullTitle": "HandlerChain status code 404",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ch = new src_1.HandlerChain();\nch.addHandler({\n    handlers: [({ request, next, store }) => {\n            if (request.action === 'hello') {\n                store.counter++;\n            }\n            return next();\n        }],\n    store: { counter: 0 },\n});\nconst actual = await ch.handleRequest({\n    action: 'hello',\n    message: 1,\n});\nchai_1.assert.deepEqual(actual.status, 404);",
                  "err": {},
                  "uuid": "ee400b47-ddcf-4662-ace1-5380eb51a088",
                  "parentUUID": "34fcdb17-a54b-47fa-9c30-7381f6008143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "500",
                  "fullTitle": "HandlerChain status code 500",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ch = new src_1.HandlerChain();\nconst err = new Error('abc');\nch.addHandler(() => {\n    throw err;\n});\nconst actual = await ch.handleRequest({ action: '123' });\nchai_1.assert.deepEqual(actual.status, 500);\nchai_1.assert.deepEqual(actual.error, err);",
                  "err": {},
                  "uuid": "3946d19f-2698-4c95-84c0-e3e5d3d55eb4",
                  "parentUUID": "34fcdb17-a54b-47fa-9c30-7381f6008143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "200",
                  "fullTitle": "HandlerChain status code 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ch = new src_1.HandlerChain();\nch.addHandler(() => { });\nconst actual = await ch.handleRequest({ action: '123' });\nchai_1.assert.deepEqual(actual.status, 200);\nchai_1.assert.isUndefined(actual.error);",
                  "err": {},
                  "uuid": "e6ec44fb-9833-4f4c-963e-962b9f21a05c",
                  "parentUUID": "34fcdb17-a54b-47fa-9c30-7381f6008143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setStatus no error",
                  "fullTitle": "HandlerChain status code setStatus no error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectStatus = 'myStatus';\nconst ch = new src_1.HandlerChain();\nch.addHandler(({ setStatus }) => { setStatus(expectStatus); });\nconst actual = await ch.handleRequest({ action: '123' });\nchai_1.assert.deepEqual(actual.status, expectStatus);\nchai_1.assert.isUndefined(actual.error);",
                  "err": {},
                  "uuid": "8ca1398c-0296-4c8b-a8bc-b6fc4dc1b162",
                  "parentUUID": "34fcdb17-a54b-47fa-9c30-7381f6008143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setStatus with error",
                  "fullTitle": "HandlerChain status code setStatus with error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectStatus = 'my status';\nconst expectError = new Error('my error');\nconst ch = new src_1.HandlerChain();\nch.addHandler(({ setStatus }) => { setStatus(expectStatus, expectError); });\nconst actual = await ch.handleRequest({ action: '123' });\nchai_1.assert.deepEqual(actual.status, expectStatus);\nchai_1.assert.deepEqual(actual.error, expectError);",
                  "err": {},
                  "uuid": "d064bc42-bdd7-4617-b32b-59710246f4fc",
                  "parentUUID": "34fcdb17-a54b-47fa-9c30-7381f6008143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getStatus",
                  "fullTitle": "HandlerChain status code getStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ch = new src_1.HandlerChain();\nconst status = [];\nconst error = new TypeError('err');\nch.addHandler({\n    handlers: [\n        ({ getStatus, setStatus, next, store }) => {\n            store.status.push(getStatus());\n            setStatus(1);\n            next();\n            store.status.push(getStatus());\n        },\n        ({ getStatus, setStatus, store }) => {\n            store.status.push(getStatus());\n            setStatus(2, error);\n        },\n    ],\n    store: { status },\n});\nawait ch.handleRequest({ action: '123' });\nchai_1.assert.deepEqual(status, [\n    { status: 0, error: undefined },\n    { status: 1, error: undefined },\n    { status: 2, error },\n]);",
                  "err": {},
                  "uuid": "67049716-4237-487e-b785-42ae700c3ce3",
                  "parentUUID": "34fcdb17-a54b-47fa-9c30-7381f6008143",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee400b47-ddcf-4662-ace1-5380eb51a088",
                "3946d19f-2698-4c95-84c0-e3e5d3d55eb4",
                "e6ec44fb-9833-4f4c-963e-962b9f21a05c",
                "8ca1398c-0296-4c8b-a8bc-b6fc4dc1b162",
                "d064bc42-bdd7-4617-b32b-59710246f4fc",
                "67049716-4237-487e-b785-42ae700c3ce3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "5159e7f2-71ee-404c-aec6-35093dbf9b80",
              "title": "context",
              "fullFile": "D:\\works\\ts-project\\chain-handler\\test\\index.test.ts",
              "file": "\\test\\index.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "request.handler fn",
                  "fullTitle": "HandlerChain context request.handler fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nch.addHandler(async ({ request }) => { });\nconst actual = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual.status, 200);",
                  "err": {},
                  "uuid": "2517fcac-fc7f-4927-ac0d-50212d28bc43",
                  "parentUUID": "5159e7f2-71ee-404c-aec6-35093dbf9b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "request.handler fn sync",
                  "fullTitle": "HandlerChain context request.handler fn sync",
                  "timedOut": false,
                  "duration": 509,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.slow(1400);\nconst expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nch.addHandler(async () => {\n    await sleep(500);\n});\nconst actual = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual.status, 200);",
                  "err": {},
                  "uuid": "7341f24f-db68-4122-ae9d-bf4a0148db28",
                  "parentUUID": "5159e7f2-71ee-404c-aec6-35093dbf9b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "request.handler priority",
                  "fullTitle": "HandlerChain context request.handler priority",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nch.addHandler(() => 2, 10)\n    .addHandler(() => 1, 5);\nconst actual = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual.status, 200);\nchai_1.assert.deepEqual(actual.response, 1);",
                  "err": {},
                  "uuid": "38795755-41f1-4d7c-80eb-84e6b7d4238c",
                  "parentUUID": "5159e7f2-71ee-404c-aec6-35093dbf9b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "request.action",
                  "fullTitle": "HandlerChain context request.action",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nch.addHandler(({ request }) => {\n    return request.action;\n});\nconst actual = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual.status, 200);\nchai_1.assert.deepEqual(actual.response, expectReq.action);",
                  "err": {},
                  "uuid": "4629dddf-e3d5-40f1-b158-f4a6b183f2b6",
                  "parentUUID": "5159e7f2-71ee-404c-aec6-35093dbf9b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response chain",
                  "fullTitle": "HandlerChain context response chain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nch\n    .addHandler(({ next }) => {\n    return next() + '1';\n})\n    .addHandler(({ next }) => {\n    return next() + '2';\n})\n    .addHandler(() => '3');\nconst actual = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual.status, 200);\nchai_1.assert.deepEqual(actual.response, '321');",
                  "err": {},
                  "uuid": "5a467000-385c-4762-b0fa-4a8a0047dfaf",
                  "parentUUID": "5159e7f2-71ee-404c-aec6-35093dbf9b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "store",
                  "fullTitle": "HandlerChain context store",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectReq = { action: 'abc', message: 'def' };\nconst ch = new src_1.HandlerChain();\nconst store = { counter: 0 };\nch.addHandler({\n    handlers: ({ store }) => {\n        return store.counter++;\n    },\n    store,\n});\nawait ch.handleRequest(expectReq);\nawait ch.handleRequest(expectReq);\nconst actual = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual.status, 200);\nchai_1.assert.deepEqual(actual.response, 2);\nchai_1.assert.deepEqual(store.counter, 3);",
                  "err": {},
                  "uuid": "b8da89e2-96b2-4985-af24-22f29b1d44fc",
                  "parentUUID": "5159e7f2-71ee-404c-aec6-35093dbf9b80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2517fcac-fc7f-4927-ac0d-50212d28bc43",
                "7341f24f-db68-4122-ae9d-bf4a0148db28",
                "38795755-41f1-4d7c-80eb-84e6b7d4238c",
                "4629dddf-e3d5-40f1-b158-f4a6b183f2b6",
                "5a467000-385c-4762-b0fa-4a8a0047dfaf",
                "b8da89e2-96b2-4985-af24-22f29b1d44fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 510,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "e0e43f4a-9db5-4940-b423-c2402003226f",
              "title": "chain",
              "fullFile": "D:\\works\\ts-project\\chain-handler\\test\\index.test.ts",
              "file": "\\test\\index.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "once",
                  "fullTitle": "HandlerChain chain once",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nch.addHandler({\n    handlers: () => 1,\n    once: true,\n});\nch.addHandler({\n    handlers: () => 2,\n    once: true,\n});\nconst actual1 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual1.status, 200);\nchai_1.assert.deepEqual(actual1.response, 1);\nconst actual2 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual2.status, 200);\nchai_1.assert.deepEqual(actual2.response, 2);\nchai_1.assert.deepEqual(actual1.response, 1);\nconst actual3 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual3.status, 404);\nchai_1.assert.isUndefined(actual3.response);",
                  "err": {},
                  "uuid": "55414bb8-3f95-4520-9ab4-c0eaeb580605",
                  "parentUUID": "e0e43f4a-9db5-4940-b423-c2402003226f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "once in Same set",
                  "fullTitle": "HandlerChain chain once in Same set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nch.addHandler({\n    handlers: [() => 1, () => 2],\n    once: true,\n});\nch.addHandler({\n    handlers: () => 3,\n    once: true,\n});\nconst actual1 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual1.status, 200);\nchai_1.assert.deepEqual(actual1.response, 1);\nconst actual2 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual2.status, 200);\nchai_1.assert.deepEqual(actual2.response, 2);\nchai_1.assert.deepEqual(actual2.response, 2);\nconst actual3 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual3.status, 200);\nchai_1.assert.deepEqual(actual3.response, 3);\nchai_1.assert.deepEqual(actual3.response, 3);\nconst actual4 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual4.status, 404);\nchai_1.assert.isUndefined(actual4.response);",
                  "err": {},
                  "uuid": "af0a6855-3c21-42f6-941a-5c32d6c68720",
                  "parentUUID": "e0e43f4a-9db5-4940-b423-c2402003226f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "remove handler",
                  "fullTitle": "HandlerChain chain remove handler",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nch.addHandler(({ removeHandler: removeHander }) => {\n    removeHander();\n    return 1;\n}).addHandler(() => 2);\nconst actual1 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual1.status, 200);\nchai_1.assert.deepEqual(actual1.response, 1);\nconst actual2 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual2.status, 200);\nchai_1.assert.deepEqual(actual2.response, 2);\nchai_1.assert.deepEqual(actual2.response, 2);",
                  "err": {},
                  "uuid": "047ef721-296c-4168-be9b-354f0b659fc0",
                  "parentUUID": "e0e43f4a-9db5-4940-b423-c2402003226f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "remove handler same set",
                  "fullTitle": "HandlerChain chain remove handler same set",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nch.addHandler({\n    handlers: [\n        ({ removeHandler: removeHander }) => {\n            removeHander();\n            return 1;\n        },\n        () => 2\n    ],\n}).addHandler({\n    handlers: () => 3,\n});\nconst actual1 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual1.status, 200);\nchai_1.assert.deepEqual(actual1.response, 1);\nconst actual2 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual2.status, 200);\nchai_1.assert.deepEqual(actual2.response, 3);\nchai_1.assert.deepEqual(actual2.response, 3);\nconst actual3 = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual3.status, 200);\nchai_1.assert.deepEqual(actual3.response, 3);\nchai_1.assert.deepEqual(actual3.response, 3);",
                  "err": {},
                  "uuid": "25d5129a-583b-48ed-98e9-fee911617ba7",
                  "parentUUID": "e0e43f4a-9db5-4940-b423-c2402003226f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "a6a0c98d-65a1-4496-a259-5b3590a1f59e",
                  "title": "next",
                  "fullFile": "D:\\works\\ts-project\\chain-handler\\test\\index.test.ts",
                  "file": "\\test\\index.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "next",
                      "fullTitle": "HandlerChain chain next next",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nconst store = { history: [] };\nch.addHandler({\n    handlers: ({ next, store: { history } }) => {\n        history.push('before');\n        next();\n        history.push('after');\n    },\n    store,\n}, 5)\n    .addHandler({\n    handlers: ({ store: { history } }) => {\n        history.push('main');\n    },\n    store,\n}, 10);\nconst actual = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual.status, 200);\nchai_1.assert.deepEqual(store.history, ['before', 'main', 'after']);",
                      "err": {},
                      "uuid": "60776920-c004-4771-a87d-30577ce6c592",
                      "parentUUID": "a6a0c98d-65a1-4496-a259-5b3590a1f59e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "next with edited request",
                      "fullTitle": "HandlerChain chain next next with edited request",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nconst store = { history: [] };\nch.addHandler({\n    handlers: ({ request, next, store: { history } }) => {\n        history.push('before');\n        request.message = 'edited';\n        next();\n        history.push('after');\n    },\n    store,\n}, 5)\n    .addHandler({\n    handlers: ({ request: { message }, store: { history } }) => {\n        history.push('main');\n        history.push(message);\n    },\n    store,\n}, 10);\nconst actual = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual.status, 200);\nchai_1.assert.deepEqual(store.history, ['before', 'main', 'edited', 'after']);",
                      "err": {},
                      "uuid": "1deae55e-e446-48f1-88be-c82da01447d0",
                      "parentUUID": "a6a0c98d-65a1-4496-a259-5b3590a1f59e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "nextSync",
                      "fullTitle": "HandlerChain chain next nextSync",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nconst store = { history: [] };\nch.addHandler({\n    handlers: ({ nextSync, store: { history } }) => {\n        history.push('before');\n        history.push(nextSync());\n        history.push('after');\n    },\n    store,\n}, 5)\n    .addHandler({\n    handlers: () => {\n        return 'main';\n    },\n    store,\n}, 10);\nconst actual = ch.handleRequestSync(expectReq);\nchai_1.assert.deepEqual(actual.status, 200);\nchai_1.assert.deepEqual(store.history, ['before', 'main', 'after']);",
                      "err": {},
                      "uuid": "343f6d68-0f9e-4f7c-8edf-e44f190c69ab",
                      "parentUUID": "a6a0c98d-65a1-4496-a259-5b3590a1f59e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "nextAsync",
                      "fullTitle": "HandlerChain chain next nextAsync",
                      "timedOut": false,
                      "duration": 208,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.slow(500);\nconst expectReq = { action: 'abc' };\nconst ch = new src_1.HandlerChain();\nconst store = { history: [] };\nch.addHandler({\n    handlers: async ({ nextAsync, store: { history } }) => {\n        history.push('before');\n        history.push(await nextAsync());\n        history.push('after');\n    },\n    store,\n}, 5)\n    .addHandler({\n    handlers: async () => {\n        await sleep(200);\n        return 'main';\n    },\n    store,\n}, 10);\nconst actual = await ch.handleRequest(expectReq);\nchai_1.assert.deepEqual(actual.status, 200);\nchai_1.assert.deepEqual(store.history, ['before', 'main', 'after']);",
                      "err": {},
                      "uuid": "f0e4c18b-7fc3-4275-bcb6-352c19291bb3",
                      "parentUUID": "a6a0c98d-65a1-4496-a259-5b3590a1f59e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "60776920-c004-4771-a87d-30577ce6c592",
                    "1deae55e-e446-48f1-88be-c82da01447d0",
                    "343f6d68-0f9e-4f7c-8edf-e44f190c69ab",
                    "f0e4c18b-7fc3-4275-bcb6-352c19291bb3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 209,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 0
                }
              ],
              "passes": [
                "55414bb8-3f95-4520-9ab4-c0eaeb580605",
                "af0a6855-3c21-42f6-941a-5c32d6c68720",
                "047ef721-296c-4168-be9b-354f0b659fc0",
                "25d5129a-583b-48ed-98e9-fee911617ba7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs",
        "reportTitle": "chain-handler",
        "reportPageTitle": "chain-handler-report",
        "reportFilename": "index",
        "autoOpen": "true"
      },
      "version": "6.2.0"
    }
  }
}